---

--- a/libsanitizer/asan/asan_linux.cpp
+++ b/libsanitizer/asan/asan_linux.cpp
@@ -13,7 +13,7 @@
 
 #include "sanitizer_common/sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #  include <dlfcn.h>
 #  include <fcntl.h>
@@ -237,4 +237,4 @@ bool HandleDlopenInit() {
 }  // namespace __asan
 
 #endif  // SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||
-        // SANITIZER_SOLARIS
+        // SANITIZER_SOLARIS || SANITIZER_ONYX
--- a/libsanitizer/asan/asan_malloc_linux.cpp
+++ b/libsanitizer/asan/asan_malloc_linux.cpp
@@ -15,7 +15,7 @@
 
 #include "sanitizer_common/sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_FUCHSIA || SANITIZER_LINUX || \
-    SANITIZER_NETBSD || SANITIZER_SOLARIS
+    SANITIZER_NETBSD || SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #  include "asan_allocator.h"
 #  include "asan_interceptors.h"
--- a/libsanitizer/builtins/assembly.h
+++ b/libsanitizer/builtins/assembly.h
@@ -49,7 +49,7 @@
 #define CONST_SECTION .section .rodata
 
 #if defined(__GNU__) || defined(__FreeBSD__) || defined(__Fuchsia__) ||        \
-    defined(__linux__)
+    defined(__linux__) || defined(__onyx__)
 #define NO_EXEC_STACK_DIRECTIVE .section .note.GNU-stack,"",%progbits
 #else
 #define NO_EXEC_STACK_DIRECTIVE
--- a/libsanitizer/interception/interception.h
+++ b/libsanitizer/interception/interception.h
@@ -19,7 +19,7 @@
 
 #if !SANITIZER_LINUX && !SANITIZER_FREEBSD && !SANITIZER_APPLE &&    \
     !SANITIZER_NETBSD && !SANITIZER_WINDOWS && !SANITIZER_FUCHSIA && \
-    !SANITIZER_SOLARIS
+    !SANITIZER_SOLARIS && !SANITIZER_ONYX
 #  error "Interception doesn't work on this operating system."
 #endif
 
@@ -368,7 +368,7 @@ inline void DoesNotSupportStaticLinking(
 #define INCLUDED_FROM_INTERCEPTION_LIB
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 # include "interception_linux.h"
 # define INTERCEPT_FUNCTION(func) INTERCEPT_FUNCTION_LINUX_OR_FREEBSD(func)
--- a/libsanitizer/interception/interception_linux.cpp
+++ b/libsanitizer/interception/interception_linux.cpp
@@ -14,7 +14,7 @@
 #include "interception.h"
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #include <dlfcn.h>   // for dlsym() and dlvsym()
 
@@ -80,4 +80,4 @@ bool InterceptFunction(const char *name,
 }  // namespace __interception
 
 #endif  // SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD ||
-        // SANITIZER_SOLARIS
+        // SANITIZER_SOLARIS || SANITIZER_ONYX
--- a/libsanitizer/interception/interception_linux.h
+++ b/libsanitizer/interception/interception_linux.h
@@ -12,7 +12,7 @@
 //===----------------------------------------------------------------------===//
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #if !defined(INCLUDED_FROM_INTERCEPTION_LIB)
 # error interception_linux.h should be included from interception library only
--- a/libsanitizer/lsan/lsan_common.h
+++ b/libsanitizer/lsan/lsan_common.h
@@ -48,7 +48,7 @@
 #  define CAN_SANITIZE_LEAKS 1
 #elif SANITIZER_RISCV64 && SANITIZER_LINUX
 #  define CAN_SANITIZE_LEAKS 1
-#elif SANITIZER_NETBSD || SANITIZER_FUCHSIA
+#elif SANITIZER_NETBSD || SANITIZER_FUCHSIA || SANITIZER_ONYX
 #  define CAN_SANITIZE_LEAKS 1
 #else
 #  define CAN_SANITIZE_LEAKS 0
--- a/libsanitizer/lsan/lsan_common_linux.cpp
+++ b/libsanitizer/lsan/lsan_common_linux.cpp
@@ -15,7 +15,7 @@
 #include "sanitizer_common/sanitizer_platform.h"
 #include "lsan_common.h"
 
-#if CAN_SANITIZE_LEAKS && (SANITIZER_LINUX || SANITIZER_NETBSD)
+#if CAN_SANITIZE_LEAKS && (SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_ONYX)
 #include <link.h>
 
 #include "sanitizer_common/sanitizer_common.h"
--- a/libsanitizer/lsan/lsan_linux.cpp
+++ b/libsanitizer/lsan/lsan_linux.cpp
@@ -12,7 +12,7 @@
 
 #include "sanitizer_common/sanitizer_platform.h"
 
-#if SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_FUCHSIA
+#if SANITIZER_LINUX || SANITIZER_NETBSD || SANITIZER_FUCHSIA || SANITIZER_ONYX
 
 #  include "lsan_allocator.h"
 #  include "lsan_thread.h"
--- a/libsanitizer/sanitizer_common/sanitizer_asm.h
+++ b/libsanitizer/sanitizer_common/sanitizer_asm.h
@@ -140,7 +140,7 @@
 #endif
 
 #if defined(__ELF__) && (defined(__GNU__) || defined(__FreeBSD__) || \
-                         defined(__Fuchsia__) || defined(__linux__))
+                         defined(__Fuchsia__) || defined(__linux__) || defined(__onyx__))
 // clang-format off
 #define NO_EXEC_STACK_DIRECTIVE .section .note.GNU-stack,"",%progbits
 // clang-format on
--- a/libsanitizer/sanitizer_common/sanitizer_getauxval.h
+++ b/libsanitizer/sanitizer_common/sanitizer_getauxval.h
@@ -19,10 +19,10 @@
 #include "sanitizer_platform.h"
 #include "sanitizer_glibc_version.h"
 
-#if SANITIZER_LINUX || SANITIZER_FUCHSIA
+#if SANITIZER_LINUX || SANITIZER_FUCHSIA || SANITIZER_ONYX
 
 # if (__GLIBC_PREREQ(2, 16) || (SANITIZER_ANDROID && __ANDROID_API__ >= 21) || \
-      SANITIZER_FUCHSIA) &&                                                    \
+      SANITIZER_FUCHSIA || SANITIZER_ONYX) &&                                  \
      !SANITIZER_GO
 #  define SANITIZER_USE_GETAUXVAL 1
 # else
--- a/libsanitizer/sanitizer_common/sanitizer_glibc_version.h
+++ b/libsanitizer/sanitizer_common/sanitizer_glibc_version.h
@@ -15,7 +15,7 @@
 
 #include "sanitizer_platform.h"
 
-#if SANITIZER_LINUX || SANITIZER_FUCHSIA
+#if SANITIZER_LINUX || SANITIZER_FUCHSIA || SANITIZER_ONYX
 #include <features.h>
 #endif
 
--- a/libsanitizer/sanitizer_common/sanitizer_internal_defs.h
+++ b/libsanitizer/sanitizer_common/sanitizer_internal_defs.h
@@ -108,7 +108,7 @@
 //
 // FIXME: do we have anything like this on Mac?
 #ifndef SANITIZER_CAN_USE_PREINIT_ARRAY
-#if (SANITIZER_LINUX || SANITIZER_FUCHSIA || SANITIZER_NETBSD) && !defined(PIC)
+#if (SANITIZER_LINUX || SANITIZER_FUCHSIA || SANITIZER_NETBSD || SANITIZER_ONYX) && !defined(PIC)
 #define SANITIZER_CAN_USE_PREINIT_ARRAY 1
 // Before Solaris 11.4, .preinit_array is fully supported only with GNU ld.
 // FIXME: Check for those conditions.
@@ -187,7 +187,7 @@ typedef long pid_t;
 typedef int pid_t;
 #endif
 
-#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_APPLE ||             \
+#if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_APPLE || SANITIZER_ONYX || \
     (SANITIZER_SOLARIS && (defined(_LP64) || _FILE_OFFSET_BITS == 64)) || \
     (SANITIZER_LINUX && !SANITIZER_GLIBC && !SANITIZER_ANDROID) ||        \
     (SANITIZER_LINUX && (defined(__x86_64__) || defined(__hexagon__)))
--- a/libsanitizer/sanitizer_common/sanitizer_libignore.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_libignore.cpp
@@ -9,7 +9,7 @@
 #include "sanitizer_platform.h"
 
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_APPLE || \
-    SANITIZER_NETBSD
+    SANITIZER_NETBSD || SANITIZER_ONYX
 
 #include "sanitizer_libignore.h"
 #include "sanitizer_flags.h"
--- a/libsanitizer/sanitizer_common/sanitizer_linux.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.cpp
@@ -14,7 +14,7 @@
 #include "sanitizer_platform.h"
 
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #  include "sanitizer_common.h"
 #  include "sanitizer_flags.h"
@@ -116,7 +116,7 @@ extern struct ps_strings *__ps_strings;
 
 extern char **environ;
 
-#  if SANITIZER_LINUX
+#  if SANITIZER_LINUX || SANITIZER_ONYX
 // <linux/time.h>
 struct kernel_timeval {
   long tv_sec;
@@ -129,7 +129,7 @@ const int FUTEX_WAKE = 1;
 const int FUTEX_PRIVATE_FLAG = 128;
 const int FUTEX_WAIT_PRIVATE = FUTEX_WAIT | FUTEX_PRIVATE_FLAG;
 const int FUTEX_WAKE_PRIVATE = FUTEX_WAKE | FUTEX_PRIVATE_FLAG;
-#  endif  // SANITIZER_LINUX
+#  endif  // SANITIZER_LINUX || SANITIZER_ONYX
 
 // Are we using 32-bit or 64-bit Linux syscalls?
 // x32 (which defines __x86_64__) has SANITIZER_WORDSIZE == 32
@@ -224,7 +224,7 @@ uptr internal_mmap(void *addr, uptr leng
                    u64 offset) {
 #      if SANITIZER_FREEBSD
   return (uptr)__sys_mmap(addr, length, prot, flags, fd, offset);
-#      elif SANITIZER_LINUX_USES_64BIT_SYSCALLS
+#      elif SANITIZER_LINUX_USES_64BIT_SYSCALLS || SANITIZER_ONYX
   return internal_syscall(SYSCALL(mmap), (uptr)addr, length, prot, flags, fd,
                           offset);
 #      else
@@ -240,7 +240,7 @@ uptr internal_munmap(void *addr, uptr le
   return internal_syscall(SYSCALL(munmap), (uptr)addr, length);
 }
 
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
 uptr internal_mremap(void *old_address, uptr old_size, uptr new_size, int flags,
                      void *new_address) {
   return internal_syscall(SYSCALL(mremap), (uptr)old_address, old_size,
@@ -264,7 +264,7 @@ uptr internal_close_range(fd_t lowfd, fd
 uptr internal_close(fd_t fd) { return internal_syscall(SYSCALL(close), fd); }
 
 uptr internal_open(const char *filename, int flags) {
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(openat), AT_FDCWD, (uptr)filename, flags);
 #    else
   return internal_syscall(SYSCALL(open), (uptr)filename, flags);
@@ -272,7 +272,7 @@ uptr internal_open(const char *filename,
 }
 
 uptr internal_open(const char *filename, int flags, u32 mode) {
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(openat), AT_FDCWD, (uptr)filename, flags,
                           mode);
 #    else
@@ -397,7 +397,7 @@ static void kernel_stat_to_stat(kstat_t
 #    endif
 
 uptr internal_stat(const char *path, void *buf) {
-#    if SANITIZER_FREEBSD
+#    if SANITIZER_FREEBSD || SANITIZER_ONYX
   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf, 0);
 #    elif SANITIZER_LINUX
 #      if defined(__loongarch__)
@@ -433,7 +433,7 @@ uptr internal_stat(const char *path, voi
 }
 
 uptr internal_lstat(const char *path, void *buf) {
-#    if SANITIZER_FREEBSD
+#    if SANITIZER_FREEBSD || SANITIZER_ONYX
   return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path, (uptr)buf,
                           AT_SYMLINK_NOFOLLOW);
 #    elif SANITIZER_LINUX
@@ -471,7 +471,7 @@ uptr internal_lstat(const char *path, vo
 }
 
 uptr internal_fstat(fd_t fd, void *buf) {
-#    if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS
+#    if SANITIZER_FREEBSD || SANITIZER_LINUX_USES_64BIT_SYSCALLS || SANITIZER_ONYX
 #      if SANITIZER_MIPS64
   // For mips64, fstat syscall fills buffer in the format of kernel_stat
   kstat_t kbuf;
@@ -511,7 +511,7 @@ uptr internal_filesize(fd_t fd) {
 uptr internal_dup(int oldfd) { return internal_syscall(SYSCALL(dup), oldfd); }
 
 uptr internal_dup2(int oldfd, int newfd) {
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(dup3), oldfd, newfd, 0);
 #    else
   return internal_syscall(SYSCALL(dup2), oldfd, newfd);
@@ -519,7 +519,7 @@ uptr internal_dup2(int oldfd, int newfd)
 }
 
 uptr internal_readlink(const char *path, char *buf, uptr bufsize) {
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(readlinkat), AT_FDCWD, (uptr)path, (uptr)buf,
                           bufsize);
 #    else
@@ -528,7 +528,7 @@ uptr internal_readlink(const char *path,
 }
 
 uptr internal_unlink(const char *path) {
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(unlinkat), AT_FDCWD, (uptr)path, 0);
 #    else
   return internal_syscall(SYSCALL(unlink), (uptr)path);
@@ -606,7 +606,7 @@ tid_t GetTid() {
 }
 
 int TgKill(pid_t pid, tid_t tid, int sig) {
-#    if SANITIZER_LINUX
+#    if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_syscall(SYSCALL(tgkill), pid, tid, sig);
 #    elif SANITIZER_FREEBSD
   return internal_syscall(SYSCALL(thr_kill2), pid, tid, sig);
@@ -642,7 +642,8 @@ u64 NanoTime() {
 // 'environ' array (on some others) and does not use libc. This function
 // should be called first inside __asan_init.
 const char *GetEnv(const char *name) {
-#  if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_SOLARIS
+  /* ONYX PORTING DETAIL: we don't support /proc/self/environ yet */
+#  if SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_SOLARIS || SANITIZER_ONYX
   if (::environ != 0) {
     uptr NameLen = internal_strlen(name);
     for (char **Env = ::environ; *Env != 0; Env++) {
@@ -1260,7 +1261,7 @@ uptr ReadBinaryName(/*out*/ char *buf, u
 }
 
 uptr ReadLongProcessName(/*out*/ char *buf, uptr buf_len) {
-#  if SANITIZER_LINUX
+#  if SANITIZER_LINUX || SANITIZER_ONYX
   char *tmpbuf;
   uptr tmpsize;
   uptr tmplen;
@@ -1329,7 +1330,7 @@ void ForEachMappedRegion(link_map *map,
 }
 #  endif
 
-#  if SANITIZER_LINUX
+#  if SANITIZER_LINUX || SANITIZER_ONYX
 #    if defined(__x86_64__)
 // We cannot use glibc's clone wrapper, because it messes with the child
 // task's TLS. It writes the PID and TID of the child task to its thread
@@ -1819,7 +1820,7 @@ uptr internal_clone(int (*fn)(void *), v
 #    endif
 #  endif  // SANITIZER_LINUX
 
-#  if SANITIZER_LINUX
+#  if SANITIZER_LINUX || SANITIZER_ONYX
 int internal_uname(struct utsname *buf) {
   return internal_syscall(SYSCALL(uname), buf);
 }
@@ -1928,7 +1929,7 @@ void *internal_start_thread(void *(*func
 void internal_join_thread(void *th) {}
 #  endif
 
-#  if SANITIZER_LINUX && defined(__aarch64__)
+#  if (SANITIZER_LINUX || SANITIZER_ONYX) && defined(__aarch64__)
 // Android headers in the older NDK releases miss this definition.
 struct __sanitizer_esr_context {
   struct _aarch64_ctx head;
--- a/libsanitizer/sanitizer_common/sanitizer_linux.h
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.h
@@ -14,7 +14,7 @@
 
 #include "sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 #  include "sanitizer_common.h"
 #  include "sanitizer_internal_defs.h"
 #  include "sanitizer_platform_limits_freebsd.h"
--- a/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp
@@ -14,7 +14,7 @@
 #include "sanitizer_platform.h"
 
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 
 #  include "sanitizer_allocator_internal.h"
 #  include "sanitizer_atomic.h"
@@ -396,7 +396,7 @@ void InitTlsSize() {}
 uptr ThreadDescriptorSize() { return 0; }
 #  endif  // (SANITIZER_FREEBSD || SANITIZER_GLIBC) && !SANITIZER_GO
 
-#  if (SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_SOLARIS) && \
+#  if (SANITIZER_FREEBSD || SANITIZER_ONYX || SANITIZER_LINUX || SANITIZER_SOLARIS) && \
       !SANITIZER_ANDROID && !SANITIZER_GO
 namespace {
 struct TlsBlock {
@@ -589,7 +589,7 @@ static void GetTls(uptr *addr, uptr *siz
   const uptr pre_tcb_size = TlsPreTcbSize();
   *addr = tp - pre_tcb_size;
   *size = g_tls_size + pre_tcb_size;
-#    elif SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_SOLARIS
+#    elif SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_ONYX || SANITIZER_SOLARIS
   uptr align;
   GetStaticTlsBoundary(addr, size, &align);
 #      if defined(__x86_64__) || defined(__i386__) || defined(__s390__) || \
@@ -659,7 +659,7 @@ static void GetTls(uptr *addr, uptr *siz
 #  if !SANITIZER_GO
 uptr GetTlsSize() {
 #    if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-        SANITIZER_SOLARIS
+        SANITIZER_SOLARIS || SANITIZER_ONYX
   uptr addr, size;
   GetTls(&addr, &size);
   return size;
@@ -1091,7 +1091,7 @@ static uptr MmapSharedNoReserve(uptr add
 
 static uptr MremapCreateAlias(uptr base_addr, uptr alias_addr,
                               uptr alias_size) {
-#  if SANITIZER_LINUX
+#  if SANITIZER_LINUX || SANITIZER_ONYX
   return internal_mremap(reinterpret_cast<void *>(base_addr), 0, alias_size,
                          MREMAP_MAYMOVE | MREMAP_FIXED,
                          reinterpret_cast<void *>(alias_addr));
--- /dev/null
+++ b/libsanitizer/sanitizer_common/sanitizer_onyx.h
@@ -0,0 +1,22 @@
+//===-- sanitizer_onyx.h ------------------------------------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===---------------------------------------------------------------------===//
+//
+// Onyx-specific sanitizer support.
+//
+//===---------------------------------------------------------------------===//
+#ifndef SANITIZER_ONYX_H
+#define SANITIZER_ONYX_H
+
+#include "sanitizer_platform.h"
+#if SANITIZER_ONYX
+
+#include "sanitizer_common.h"
+
+#endif
+
+#endif
--- a/libsanitizer/sanitizer_common/sanitizer_platform.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform.h
@@ -14,7 +14,7 @@
 
 #if !defined(__linux__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__Fuchsia__) &&     \
-    !(defined(__sun__) && defined(__svr4__))
+    !(defined(__sun__) && defined(__svr4__)) && !defined(__onyx__)
 #  error "This operating system is not supported"
 #endif
 
@@ -129,6 +129,12 @@
 #  define SANITIZER_FUCHSIA 0
 #endif
 
+#if defined(__onyx__)
+#  define SANITIZER_ONYX 1
+#else
+#  define SANITIZER_ONYX 0
+#endif
+
 // Assume linux that is not glibc or android is musl libc.
 #if SANITIZER_LINUX && !SANITIZER_GLIBC && !SANITIZER_ANDROID
 #  define SANITIZER_MUSL 1
@@ -138,7 +144,7 @@
 
 #define SANITIZER_POSIX                                     \
   (SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_APPLE || \
-   SANITIZER_NETBSD || SANITIZER_SOLARIS)
+   SANITIZER_NETBSD || SANITIZER_SOLARIS || SANITIZER_ONYX)
 
 #if __LP64__ || defined(_WIN64)
 #  define SANITIZER_WORDSIZE 64
--- a/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h
@@ -157,6 +157,12 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SI_LINUX_NOT_FREEBSD 0
 #endif
 
+#if SANITIZER_ONYX
+# define SI_ONYX 1
+#else
+# define SI_ONYX 0
+#endif
+
 #define SANITIZER_INTERCEPT_STRLEN SI_NOT_FUCHSIA
 #define SANITIZER_INTERCEPT_STRNLEN (SI_NOT_MAC && SI_NOT_FUCHSIA)
 #define SANITIZER_INTERCEPT_STRCMP SI_NOT_FUCHSIA
@@ -168,7 +174,7 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SANITIZER_INTERCEPT_STRRCHR SI_NOT_FUCHSIA
 #define SANITIZER_INTERCEPT_STRSPN SI_NOT_FUCHSIA
 #define SANITIZER_INTERCEPT_STRPBRK SI_NOT_FUCHSIA
-#define SANITIZER_INTERCEPT_TEXTDOMAIN SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_TEXTDOMAIN (SI_LINUX_NOT_ANDROID || SI_ONYX) || SI_SOLARIS
 #define SANITIZER_INTERCEPT_STRCASECMP SI_POSIX
 #define SANITIZER_INTERCEPT_MEMSET 1
 #define SANITIZER_INTERCEPT_MEMMOVE 1
@@ -189,7 +195,7 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 // FIXME: enable memmem on Windows.
 #define SANITIZER_INTERCEPT_MEMMEM (SI_POSIX && !SI_MAC_DEPLOYMENT_BELOW_10_7)
 #define SANITIZER_INTERCEPT_MEMCHR SI_NOT_FUCHSIA
-#define SANITIZER_INTERCEPT_MEMRCHR (SI_FREEBSD || SI_LINUX || SI_NETBSD)
+#define SANITIZER_INTERCEPT_MEMRCHR (SI_FREEBSD || SI_LINUX || SI_ONYX || SI_NETBSD)
 
 #define SANITIZER_INTERCEPT_READ SI_POSIX
 #define SANITIZER_INTERCEPT_PREAD SI_POSIX
@@ -214,9 +220,9 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SANITIZER_INTERCEPT_WRITEV SI_POSIX
 
 #define SANITIZER_INTERCEPT_PREADV \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_PWRITEV \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_PREADV64 SI_GLIBC
 #define SANITIZER_INTERCEPT_PWRITEV64 SI_GLIBC
 
@@ -242,20 +248,20 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 
 #define SANITIZER_INTERCEPT_GETPWNAM_AND_FRIENDS SI_POSIX
 #define SANITIZER_INTERCEPT_GETPWNAM_R_AND_FRIENDS \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_GETPWENT \
-  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_FGETGRENT_R (SI_GLIBC || SI_SOLARIS)
-#define SANITIZER_INTERCEPT_FGETPWENT SI_LINUX_NOT_ANDROID || SI_SOLARIS
+#define SANITIZER_INTERCEPT_FGETPWENT SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS
 #define SANITIZER_INTERCEPT_GETPWENT_R \
   (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_FGETPWENT_R (SI_FREEBSD || SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_SETPWENT \
-  (SI_MAC || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_MAC || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_CLOCK_GETTIME \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX || SI_ONYX || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_CLOCK_GETCPUCLOCKID \
-  (SI_LINUX || SI_FREEBSD || SI_NETBSD)
+  (SI_LINUX || SI_FREEBSD || SI_ONYX || SI_NETBSD)
 #define SANITIZER_INTERCEPT_GETITIMER SI_POSIX
 #define SANITIZER_INTERCEPT_TIME SI_POSIX
 #define SANITIZER_INTERCEPT_GLOB (SI_GLIBC || SI_SOLARIS)
@@ -272,27 +278,27 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME SI_POSIX
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME2 SI_POSIX && !SI_SOLARIS
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME_R \
-  (SI_FREEBSD || SI_LINUX || SI_SOLARIS)
+  (SI_FREEBSD || SI_LINUX || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_GETHOSTBYNAME2_R \
-  (SI_FREEBSD || SI_LINUX_NOT_ANDROID)
+  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_GETHOSTBYADDR_R \
-  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_GETHOSTENT_R (SI_FREEBSD || SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_GETSOCKOPT SI_POSIX
 #define SANITIZER_INTERCEPT_ACCEPT SI_POSIX
 #define SANITIZER_INTERCEPT_ACCEPT4 \
-  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_FREEBSD)
+  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_FREEBSD || SI_ONYX)
 #define SANITIZER_INTERCEPT_PACCEPT SI_NETBSD
 #define SANITIZER_INTERCEPT_MODF SI_POSIX
 #define SANITIZER_INTERCEPT_RECVMSG SI_POSIX
 #define SANITIZER_INTERCEPT_SENDMSG SI_POSIX
-#define SANITIZER_INTERCEPT_RECVMMSG SI_LINUX
-#define SANITIZER_INTERCEPT_SENDMMSG SI_LINUX
-#define SANITIZER_INTERCEPT_SYSMSG SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_RECVMMSG (SI_LINUX || SI_ONYX)
+#define SANITIZER_INTERCEPT_SENDMMSG (SI_LINUX || SI_ONYX)
+#define SANITIZER_INTERCEPT_SYSMSG (SI_LINUX_NOT_ANDROID || SI_ONYX)
 #define SANITIZER_INTERCEPT_GETPEERNAME SI_POSIX
 #define SANITIZER_INTERCEPT_IOCTL SI_POSIX
 #define SANITIZER_INTERCEPT_INET_ATON SI_POSIX
-#define SANITIZER_INTERCEPT_SYSINFO SI_LINUX
+#define SANITIZER_INTERCEPT_SYSINFO (SI_LINUX || SI_ONYX)
 #define SANITIZER_INTERCEPT_READDIR SI_POSIX
 #define SANITIZER_INTERCEPT_READDIR64 SI_GLIBC || SI_SOLARIS32
 #if SI_LINUX_NOT_ANDROID &&                                                \
@@ -421,27 +427,27 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 
 // FIXME: getline seems to be available on OSX 10.7
 #define SANITIZER_INTERCEPT_GETLINE \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_SOLARIS || SI_ONYX)
 
 #define SANITIZER_INTERCEPT__EXIT \
-  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_MAC || SI_SOLARIS)
+  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_MAC || SI_SOLARIS || SI_ONYX)
 
 #define SANITIZER_INTERCEPT___LIBC_MUTEX SI_NETBSD
 #define SANITIZER_INTERCEPT_PTHREAD_SETNAME_NP \
-  (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_PTHREAD_GETNAME_NP \
-  (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_GLIBC || SI_SOLARIS || SI_ONYX)
 
 #define SANITIZER_INTERCEPT_TLS_GET_ADDR \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX)
 
 #define SANITIZER_INTERCEPT_LISTXATTR SI_LINUX
 #define SANITIZER_INTERCEPT_GETXATTR SI_LINUX
 #define SANITIZER_INTERCEPT_GETRESID SI_LINUX
 #define SANITIZER_INTERCEPT_GETIFADDRS \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_IF_INDEXTONAME \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS || SI_ONYX)
 #define SANITIZER_INTERCEPT_CAPGET SI_LINUX_NOT_ANDROID
 #if SI_LINUX && defined(__arm__)
 #define SANITIZER_INTERCEPT_AEABI_MEM 1
@@ -449,44 +455,44 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SANITIZER_INTERCEPT_AEABI_MEM 0
 #endif
 #define SANITIZER_INTERCEPT___BZERO SI_MAC || SI_GLIBC
-#define SANITIZER_INTERCEPT_BZERO SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_BZERO SI_LINUX_NOT_ANDROID || SI_ONYX
 #define SANITIZER_INTERCEPT_FTIME (!SI_FREEBSD && !SI_NETBSD && SI_POSIX)
 #define SANITIZER_INTERCEPT_XDR (SI_GLIBC || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_XDRREC SI_GLIBC
 #define SANITIZER_INTERCEPT_TSEARCH \
-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_LIBIO_INTERNALS SI_GLIBC
 #define SANITIZER_INTERCEPT_FOPEN SI_POSIX
 #define SANITIZER_INTERCEPT_FOPEN64 (SI_GLIBC || SI_SOLARIS32)
 #define SANITIZER_INTERCEPT_OPEN_MEMSTREAM \
-  (SI_LINUX_NOT_ANDROID || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_OBSTACK SI_GLIBC
 #define SANITIZER_INTERCEPT_FFLUSH SI_POSIX
 #define SANITIZER_INTERCEPT_FCLOSE SI_POSIX
 
 #ifndef SANITIZER_INTERCEPT_DLOPEN_DLCLOSE
 #define SANITIZER_INTERCEPT_DLOPEN_DLCLOSE \
-  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_MAC || SI_SOLARIS)
+  (SI_FREEBSD || SI_NETBSD || SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_SOLARIS)
 #endif
 
 #define SANITIZER_INTERCEPT_GETPASS \
-  (SI_LINUX_NOT_ANDROID || SI_MAC || SI_NETBSD)
-#define SANITIZER_INTERCEPT_TIMERFD SI_LINUX_NOT_ANDROID
+  (SI_LINUX_NOT_ANDROID || SI_ONYX || SI_MAC || SI_NETBSD)
+#define SANITIZER_INTERCEPT_TIMERFD SI_LINUX_NOT_ANDROID || SI_ONYX
 
 #define SANITIZER_INTERCEPT_MLOCKX SI_POSIX
-#define SANITIZER_INTERCEPT_FOPENCOOKIE SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_FOPENCOOKIE SI_LINUX_NOT_ANDROID || SI_ONYX
 #define SANITIZER_INTERCEPT_SEM \
-  (SI_LINUX || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PTHREAD_SETCANCEL SI_POSIX
 #define SANITIZER_INTERCEPT_MINCORE \
-  (SI_LINUX || SI_NETBSD || SI_FREEBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_NETBSD || SI_FREEBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_PROCESS_VM_READV SI_LINUX
 #define SANITIZER_INTERCEPT_CTERMID \
-  (SI_LINUX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_MAC || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_CTERMID_R (SI_MAC || SI_FREEBSD || SI_SOLARIS)
 
 #define SANITIZER_INTERCEPTOR_HOOKS \
-  (SI_LINUX || SI_MAC || SI_WINDOWS || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
+  (SI_LINUX || SI_ONYX || SI_MAC || SI_WINDOWS || SI_FREEBSD || SI_NETBSD || SI_SOLARIS)
 #define SANITIZER_INTERCEPT_RECV_RECVFROM SI_POSIX
 #define SANITIZER_INTERCEPT_SEND_SENDTO SI_POSIX
 #define SANITIZER_INTERCEPT_EVENTFD_READ_WRITE (SI_LINUX || SI_FREEBSD)
@@ -537,12 +543,12 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SANITIZER_INTERCEPT_ACCESS (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_FACCESSAT (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_GETGROUPLIST \
-  (SI_NETBSD || SI_FREEBSD || SI_LINUX)
+  (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_ONYX)
 #define SANITIZER_INTERCEPT_STRLCPY \
   (SI_NETBSD || SI_FREEBSD || SI_MAC || SI_ANDROID)
 
-#define SANITIZER_INTERCEPT_NAME_TO_HANDLE_AT SI_LINUX_NOT_ANDROID
-#define SANITIZER_INTERCEPT_OPEN_BY_HANDLE_AT SI_LINUX_NOT_ANDROID
+#define SANITIZER_INTERCEPT_NAME_TO_HANDLE_AT (SI_LINUX_NOT_ANDROID || SI_ONYX)
+#define SANITIZER_INTERCEPT_OPEN_BY_HANDLE_AT (SI_LINUX_NOT_ANDROID || SI_ONYX)
 
 #define SANITIZER_INTERCEPT_READLINK SI_POSIX
 #if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
@@ -560,15 +566,15 @@ SANITIZER_WEAK_IMPORT void *aligned_allo
 #define SANITIZER_INTERCEPT_STRMODE (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_TTYENT (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_TTYENTPATH SI_NETBSD
-#define SANITIZER_INTERCEPT_PROTOENT (SI_LINUX || SI_NETBSD || SI_FREEBSD)
+#define SANITIZER_INTERCEPT_PROTOENT (SI_LINUX || SI_ONYX || SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_PROTOENT_R SI_GLIBC
 #define SANITIZER_INTERCEPT_NETENT (SI_LINUX || SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_SETVBUF \
-  (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_MAC)
+  (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_ONYX || SI_MAC)
 #define SANITIZER_INTERCEPT_GETMNTINFO (SI_NETBSD || SI_FREEBSD || SI_MAC)
 #define SANITIZER_INTERCEPT_MI_VECTOR_HASH SI_NETBSD
 #define SANITIZER_INTERCEPT_GETVFSSTAT SI_NETBSD
-#define SANITIZER_INTERCEPT_REGEX (SI_NETBSD || SI_FREEBSD || SI_LINUX)
+#define SANITIZER_INTERCEPT_REGEX (SI_NETBSD || SI_FREEBSD || SI_LINUX || SI_ONYX)
 #define SANITIZER_INTERCEPT_REGEXSUB SI_NETBSD
 #define SANITIZER_INTERCEPT_FTS (SI_NETBSD || SI_FREEBSD)
 #define SANITIZER_INTERCEPT_SYSCTL (SI_NETBSD || SI_FREEBSD || SI_MAC)
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
@@ -11,7 +11,7 @@
 // Sizes and layouts of platform-specific POSIX data structures.
 //===----------------------------------------------------------------------===//
 
-#if defined(__linux__) || defined(__APPLE__)
+#if defined(__linux__) || defined(__onyx__) || defined(__APPLE__)
 // Tests in this file assume that off_t-dependent data structures match the
 // libc ABI. For example, struct dirent here is what readdir() function (as
 // exported from libc) returns, and not the user-facing "dirent", which
@@ -24,7 +24,7 @@
 // Must go after undef _FILE_OFFSET_BITS.
 #include "sanitizer_platform.h"
 
-#if SANITIZER_LINUX || SANITIZER_APPLE
+#if SANITIZER_LINUX || SANITIZER_APPLE || SANITIZER_ONYX
 // Must go after undef _FILE_OFFSET_BITS.
 #include "sanitizer_glibc_version.h"
 
@@ -164,7 +164,11 @@ typedef struct user_fpregs elf_fpregset_
 #include <sys/epoll.h>
 #include <linux/capability.h>
 #else
+
+#if !SANITIZER_ONYX
 #include <fstab.h>
+#endif
+
 #endif // SANITIZER_LINUX
 
 #if SANITIZER_APPLE
@@ -173,6 +177,29 @@ typedef struct user_fpregs elf_fpregset_
 #include <sys/sockio.h>
 #endif
 
+#if SANITIZER_ONYX
+#include <mntent.h>
+#include <crypt.h>
+#include <sys/statvfs.h>
+#include <sys/statfs.h>
+#include <glob.h>
+#include <sys/ioctl.h>
+#include <utime.h>
+#include <stdio.h>
+#include <net/ethernet.h>
+#include <netinet/ether.h>
+#include <net/if.h>
+#include <sys/timeb.h>
+#include <sys/mount.h>
+#include <utmpx.h>
+#include <mqueue.h>
+#include <sys/mtio.h>
+#include <sys/msg.h>
+#include <sys/shm.h>
+#include <sys/timex.h>
+#include <sys/sysinfo.h>
+#endif
+
 // Include these after system headers to avoid name clashes and ambiguities.
 #  include "sanitizer_common.h"
 #  include "sanitizer_internal_defs.h"
@@ -241,6 +268,9 @@ namespace __sanitizer {
   }
 #  endif  // !SANITIZER_ANDROID
 
+#  if SANITIZER_ONYX
+  unsigned struct_sysinfo_sz = sizeof(struct sysinfo);
+#  endif
 #  if SANITIZER_LINUX
   unsigned struct_epoll_event_sz = sizeof(struct epoll_event);
   unsigned struct_sysinfo_sz = sizeof(struct sysinfo);
@@ -268,7 +298,7 @@ namespace __sanitizer {
   unsigned struct_oldold_utsname_sz = sizeof(struct oldold_utsname);
 #endif // SANITIZER_LINUX
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
   unsigned struct_rlimit_sz = sizeof(struct rlimit);
   unsigned struct_timespec_sz = sizeof(struct timespec);
   unsigned struct_utimbuf_sz = sizeof(struct utimbuf);
@@ -298,7 +328,7 @@ namespace __sanitizer {
   unsigned struct_statvfs64_sz = sizeof(struct statvfs64);
 #endif // SANITIZER_GLIBC
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX || SANITIZER_ONYX && !SANITIZER_ANDROID
   unsigned struct_timex_sz = sizeof(struct timex);
   unsigned struct_msqid_ds_sz = sizeof(struct msqid_ds);
   unsigned struct_mq_attr_sz = sizeof(struct mq_attr);
@@ -315,7 +345,7 @@ namespace __sanitizer {
 #endif
 
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX || SANITIZER_ONYX && !SANITIZER_ANDROID
   unsigned struct_shminfo_sz = sizeof(struct shminfo);
   unsigned struct_shm_info_sz = sizeof(struct shm_info);
   int shmctl_ipc_stat = (int)IPC_STAT;
@@ -540,7 +570,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned struct_sock_fprog_sz = sizeof(struct sock_fprog);
 #  endif  // SANITIZER_GLIBC
 
-#  if !SANITIZER_ANDROID && !SANITIZER_APPLE
+#  if !SANITIZER_ANDROID && !SANITIZER_APPLE && !SANITIZER_ONYX
   unsigned struct_sioc_sg_req_sz = sizeof(struct sioc_sg_req);
   unsigned struct_sioc_vif_req_sz = sizeof(struct sioc_vif_req);
 #endif
@@ -593,6 +623,7 @@ unsigned struct_ElfW_Phdr_sz = sizeof(El
   unsigned IOCTL_TIOCSPGRP = TIOCSPGRP;
   unsigned IOCTL_TIOCSTI = TIOCSTI;
   unsigned IOCTL_TIOCSWINSZ = TIOCSWINSZ;
+
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
   unsigned IOCTL_SIOCGETSGCNT = SIOCGETSGCNT;
   unsigned IOCTL_SIOCGETVIFCNT = SIOCGETVIFCNT;
@@ -1246,7 +1277,7 @@ CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_next)
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_name);
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_addr);
 CHECK_SIZE_AND_OFFSET(ifaddrs, ifa_netmask);
-#if SANITIZER_LINUX || SANITIZER_FREEBSD
+#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_ONYX
 // Compare against the union, because we can't reach into the union in a
 // compliant way.
 #ifdef ifa_dstaddr
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
@@ -14,7 +14,7 @@
 #ifndef SANITIZER_PLATFORM_LIMITS_POSIX_H
 #define SANITIZER_PLATFORM_LIMITS_POSIX_H
 
-#if SANITIZER_LINUX || SANITIZER_APPLE
+#if SANITIZER_LINUX || SANITIZER_APPLE || SANITIZER_ONYX
 
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_platform.h"
@@ -71,7 +71,9 @@ extern unsigned struct_regex_sz;
 extern unsigned struct_regmatch_sz;
 
 #if !SANITIZER_ANDROID
+#if !SANITIZER_ONYX
 extern unsigned struct_fstab_sz;
+#endif
 extern unsigned struct_statfs_sz;
 extern unsigned struct_sockaddr_sz;
 unsigned ucontext_t_sz(void *uctx);
@@ -144,7 +146,11 @@ extern unsigned struct_oldold_utsname_sz
 const unsigned struct_kexec_segment_sz = 4 * sizeof(unsigned long);
 #endif  // SANITIZER_LINUX
 
-#if SANITIZER_LINUX
+#if SANITIZER_ONYX
+extern unsigned struct_sysinfo_sz;
+#endif
+
+#if SANITIZER_LINUX || SANITIZER_ONYX
 
 #if defined(__powerpc64__) || defined(__s390__) || defined(__loongarch__)
 const unsigned struct___old_kernel_stat_sz = 0;
@@ -199,11 +205,11 @@ struct __sanitizer_sem_t {
   int data[4];
 #elif SANITIZER_ANDROID && !defined(_LP64)
   int data;
-#elif SANITIZER_LINUX
+#elif SANITIZER_LINUX || SANITIZER_ONYX
   uptr data[4];
 #endif
 };
-#endif // SANITIZER_LINUX
+#endif // SANITIZER_LINUX || SANITIZER_ONYX
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
 extern unsigned struct_ustat_sz;
@@ -304,7 +310,7 @@ struct __sanitizer_shmid_ds {
 };
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_msqid_ds_sz;
 extern unsigned struct_mq_attr_sz;
 extern unsigned struct_timex_sz;
@@ -424,7 +430,7 @@ struct __sanitizer_tm {
   const char *tm_zone;
 };
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 struct __sanitizer_mntent {
   char *mnt_fsname;
   char *mnt_dir;
@@ -456,6 +462,42 @@ struct __sanitizer_cmsghdr {
   int cmsg_level;
   int cmsg_type;
 };
+#elif SANITIZER_ONYX
+
+struct __sanitizer_msghdr {
+	void *msg_name;
+	unsigned int msg_namelen;
+	struct __sanitizer_iovec *msg_iov;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __BIG_ENDIAN
+	int __pad1;
+#endif
+	int msg_iovlen;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __LITTLE_ENDIAN
+	int __pad1;
+#endif
+	void *msg_control;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __BIG_ENDIAN
+	int __pad2;
+#endif
+	unsigned int msg_controllen;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __LITTLE_ENDIAN
+	int __pad2;
+#endif
+	int msg_flags;
+};
+
+struct __sanitizer_cmsghdr {
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __BIG_ENDIAN
+	int __pad1;
+#endif
+	unsigned int cmsg_len;
+#if __LONG_MAX > 0x7fffffff && __BYTE_ORDER == __LITTLE_ENDIAN
+	int __pad1;
+#endif
+	int cmsg_level;
+	int cmsg_type;
+};
+
 #else
 // In POSIX, int msg_iovlen; socklen_t msg_controllen; socklen_t cmsg_len; but
 // many implementations don't conform to the standard.
@@ -475,7 +517,7 @@ struct __sanitizer_cmsghdr {
 };
 #endif
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 struct __sanitizer_mmsghdr {
   __sanitizer_msghdr msg_hdr;
   unsigned int msg_len;
@@ -489,7 +531,7 @@ struct __sanitizer_dirent {
   unsigned short d_reclen;
   // more fields that we don't care about
 };
-#  elif (SANITIZER_LINUX && !SANITIZER_GLIBC) || defined(__x86_64__) || \
+#  elif ((SANITIZER_LINUX  || SANITIZER_ONYX) && !SANITIZER_GLIBC) || defined(__x86_64__) || \
       defined(__hexagon__)
 struct __sanitizer_dirent {
   unsigned long long d_ino;
@@ -506,7 +548,7 @@ struct __sanitizer_dirent {
 };
 #  endif
 
-#  if SANITIZER_GLIBC
+#  if SANITIZER_GLIBC || SANITIZER_ONYX
 struct __sanitizer_dirent64 {
   unsigned long long d_ino;
   unsigned long long d_off;
@@ -521,12 +563,12 @@ typedef long long __sanitizer_clock_t;
 typedef long __sanitizer_clock_t;
 #endif
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 typedef int __sanitizer_clockid_t;
 typedef unsigned long long __sanitizer_eventfd_t;
 #endif
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 #    if defined(_LP64) || defined(__x86_64__) || defined(__powerpc__) || \
         defined(__mips__) || defined(__hexagon__)
 typedef unsigned __sanitizer___kernel_uid_t;
@@ -570,7 +612,7 @@ typedef unsigned long __sanitizer_sigset
 # endif
 #elif SANITIZER_APPLE
 typedef unsigned __sanitizer_sigset_t;
-#elif SANITIZER_LINUX
+#elif (SANITIZER_LINUX || SANITIZER_ONYX)
 struct __sanitizer_sigset_t {
   // The size is determined by looking at sizeof of real sigset_t on linux.
   uptr val[128 / sizeof(uptr)];
@@ -678,7 +720,7 @@ struct __sanitizer_sigaction {
 #endif
 #endif
 #endif
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
   void (*sa_restorer)();
 #endif
 #if defined(__mips__) && (SANITIZER_WORDSIZE == 32)
@@ -728,7 +770,7 @@ extern const uptr sig_dfl;
 extern const uptr sig_err;
 extern const uptr sa_siginfo;
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern int e_tabsz;
 #endif
 
@@ -736,7 +778,7 @@ extern int af_inet;
 extern int af_inet6;
 uptr __sanitizer_in_addr_sz(int af);
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 struct __sanitizer_dl_phdr_info {
   uptr dlpi_addr;
   const char *dlpi_name;
@@ -798,7 +840,7 @@ typedef unsigned long __sanitizer_nfds_t
 #endif
 
 #if !SANITIZER_ANDROID
-# if SANITIZER_LINUX
+# if (SANITIZER_LINUX || SANITIZER_ONYX)
 struct __sanitizer_glob_t {
   uptr gl_pathc;
   char **gl_pathv;
@@ -811,9 +853,9 @@ struct __sanitizer_glob_t {
   int (*gl_lstat)(const char *, void *);
   int (*gl_stat)(const char *, void *);
 };
-# endif  // SANITIZER_LINUX
+# endif  // (SANITIZER_LINUX || SANITIZER_ONYX)
 
-# if SANITIZER_LINUX
+# if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern int glob_nomatch;
 extern int glob_altdirfunc;
 # endif
@@ -831,7 +873,7 @@ struct __sanitizer_wordexp_t {
   uptr we_offs;
 };
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 struct __sanitizer_FILE {
   int _flags;
   char *_IO_read_ptr;
@@ -898,7 +940,7 @@ inline T ptrace_data_arg(int request, T
 }
 #  endif
 
-#  if SANITIZER_LINUX && !SANITIZER_ANDROID
+#  if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_shminfo_sz;
 extern unsigned struct_shm_info_sz;
 extern int shmctl_ipc_stat;
@@ -928,7 +970,7 @@ struct __sanitizer_ifconf {
 };
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 struct __sanitizer__obstack_chunk {
   char *limit;
   struct __sanitizer__obstack_chunk *prev;
@@ -1005,7 +1047,7 @@ extern unsigned struct_ifreq_sz;
 extern unsigned struct_termios_sz;
 extern unsigned struct_winsize_sz;
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern unsigned struct_arpreq_sz;
 extern unsigned struct_cdrom_msf_sz;
 extern unsigned struct_cdrom_multisession_sz;
@@ -1033,9 +1075,9 @@ extern unsigned struct_termio_sz;
 extern unsigned struct_vt_consize_sz;
 extern unsigned struct_vt_sizes_sz;
 extern unsigned struct_vt_stat_sz;
-#endif  // SANITIZER_LINUX
+#endif  // (SANITIZER_LINUX || SANITIZER_ONYX)
 
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern unsigned struct_copr_buffer_sz;
 extern unsigned struct_copr_debug_buf_sz;
 extern unsigned struct_copr_msg_sz;
@@ -1047,9 +1089,9 @@ extern unsigned struct_sbi_instrument_sz
 extern unsigned struct_seq_event_rec_sz;
 extern unsigned struct_synth_info_sz;
 extern unsigned struct_vt_mode_sz;
-#endif // SANITIZER_LINUX
+#endif // (SANITIZER_LINUX || SANITIZER_ONYX)
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_ax25_parms_struct_sz;
 extern unsigned struct_input_keymap_entry_sz;
 extern unsigned struct_ipx_config_data_sz;
@@ -1071,7 +1113,7 @@ extern unsigned struct_sock_fprog_sz;
 
 extern const unsigned long __sanitizer_bufsiz;
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned struct_audio_buf_info_sz;
 extern unsigned struct_ppp_stats_sz;
 #endif  // (SANITIZER_LINUX || SANITIZER_FREEBSD) && !SANITIZER_ANDROID
@@ -1131,11 +1173,11 @@ extern unsigned IOCTL_TIOCSETD;
 extern unsigned IOCTL_TIOCSPGRP;
 extern unsigned IOCTL_TIOCSTI;
 extern unsigned IOCTL_TIOCSWINSZ;
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if (SANITIZER_LINUX || SANITIZER_ONYX) && !SANITIZER_ANDROID
 extern unsigned IOCTL_SIOCGETSGCNT;
 extern unsigned IOCTL_SIOCGETVIFCNT;
 #endif
-#if SANITIZER_LINUX
+#if (SANITIZER_LINUX || SANITIZER_ONYX)
 extern unsigned IOCTL_EVIOCGABS;
 extern unsigned IOCTL_EVIOCGBIT;
 extern unsigned IOCTL_EVIOCGEFFECTS;
@@ -1401,7 +1443,7 @@ extern unsigned IOCTL_VT_OPENQRY;
 extern unsigned IOCTL_VT_RELDISP;
 extern unsigned IOCTL_VT_SETMODE;
 extern unsigned IOCTL_VT_WAITACTIVE;
-#endif  // SANITIZER_LINUX
+#endif  // (SANITIZER_LINUX || SANITIZER_ONYX)
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
 extern unsigned IOCTL_EQL_EMANCIPATE;
--- a/libsanitizer/sanitizer_common/sanitizer_posix_libcdep.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_posix_libcdep.cpp
@@ -375,7 +375,9 @@ void PlatformPrepareForSandboxing(void *
   // to read the file mappings from /proc/self/maps. Luckily, neither the
   // process will be able to load additional libraries, so it's fine to use the
   // cached mappings.
+#if !SANITIZER_ONYX
   MemoryMappingLayout::CacheMemoryMappings();
+#endif
 }
 
 static bool MmapFixed(uptr fixed_addr, uptr size, int additional_flags,
--- a/libsanitizer/sanitizer_common/sanitizer_procmaps.h
+++ b/libsanitizer/sanitizer_common/sanitizer_procmaps.h
@@ -17,12 +17,13 @@
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || \
     SANITIZER_APPLE || SANITIZER_SOLARIS ||  \
-    SANITIZER_FUCHSIA
+    SANITIZER_FUCHSIA || SANITIZER_ONYX
 
 #include "sanitizer_common.h"
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_fuchsia.h"
 #include "sanitizer_linux.h"
+#include "sanitizer_onyx.h"
 #include "sanitizer_mac.h"
 #include "sanitizer_mutex.h"
 
--- /dev/null
+++ b/libsanitizer/sanitizer_common/sanitizer_stoptheworld_onyx.cpp
@@ -0,0 +1,27 @@
+//===-- sanitizer_stoptheworld_onyx.cpp -------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===---------------------------------------------------------------------===//
+//
+// See sanitizer_stoptheworld.h for details.
+//
+//===---------------------------------------------------------------------===//
+
+#include "sanitizer_platform.h"
+
+#if SANITIZER_ONYX
+
+#include "sanitizer_stoptheworld.h"
+
+namespace __sanitizer {
+
+void StopTheWorld(StopTheWorldCallback callback, void *argument) {
+    // TODO: Implement
+}  // namespace __sanitizer
+
+}
+
+#endif  // SANITIZER_ONYX
--- a/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cpp
@@ -12,7 +12,7 @@
 
 #include "sanitizer_platform.h"
 #if SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD || \
-    SANITIZER_SOLARIS
+    SANITIZER_SOLARIS || SANITIZER_ONYX
 #include "sanitizer_common.h"
 #include "sanitizer_stacktrace.h"
 
@@ -171,4 +171,4 @@ void BufferedStackTrace::UnwindSlow(uptr
 }  // namespace __sanitizer
 
 #endif  // SANITIZER_FREEBSD || SANITIZER_LINUX || SANITIZER_NETBSD ||
-        // SANITIZER_SOLARIS
+        // SANITIZER_SOLARIS || SANITIZER_ONYX
--- a/libsanitizer/tsan/tsan_interceptors_posix.cpp
+++ b/libsanitizer/tsan/tsan_interceptors_posix.cpp
@@ -1139,7 +1139,7 @@ TSAN_INTERCEPTOR(void, pthread_exit, voi
   REAL(pthread_exit)(retval);
 }
 
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 TSAN_INTERCEPTOR(int, pthread_tryjoin_np, void *th, void **ret) {
   SCOPED_INTERCEPTOR_RAW(pthread_tryjoin_np, th, ret);
   Tid tid = ThreadConsumeTid(thr, pc, (uptr)th);
@@ -2966,7 +2966,7 @@ void InitializeInterceptors() {
   TSAN_INTERCEPT(pthread_join);
   TSAN_INTERCEPT(pthread_detach);
   TSAN_INTERCEPT(pthread_exit);
-  #if SANITIZER_LINUX
+  #if SANITIZER_LINUX || SANITIZER_ONYX
   TSAN_INTERCEPT(pthread_tryjoin_np);
   TSAN_INTERCEPT(pthread_timedjoin_np);
   #endif
--- a/libsanitizer/tsan/tsan_platform_linux.cpp
+++ b/libsanitizer/tsan/tsan_platform_linux.cpp
@@ -12,7 +12,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "sanitizer_common/sanitizer_platform.h"
-#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD
+#if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_NETBSD || SANITIZER_ONYX
 
 #include "sanitizer_common/sanitizer_common.h"
 #include "sanitizer_common/sanitizer_libc.h"
@@ -35,7 +35,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include <sys/mman.h>
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 #include <sys/personality.h>
 #include <setjmp.h>
 #endif
@@ -462,7 +462,7 @@ int ExtractRecvmsgFDs(void *msgp, int *f
 // Reverse operation of libc stack pointer mangling
 static uptr UnmangleLongJmpSp(uptr mangled_sp) {
 #if defined(__x86_64__)
-# if SANITIZER_LINUX
+# if SANITIZER_LINUX || SANITIZER_ONYX
   // Reverse of:
   //   xor  %fs:0x30, %rsi
   //   rol  $0x11, %rsi
@@ -517,7 +517,7 @@ static uptr UnmangleLongJmpSp(uptr mangl
 # else
 #  define LONG_JMP_SP_ENV_SLOT 2
 # endif
-#elif SANITIZER_LINUX
+#elif SANITIZER_LINUX || SANITIZER_ONYX
 # ifdef __aarch64__
 #  define LONG_JMP_SP_ENV_SLOT 13
 # elif defined(__loongarch__)
--- a/libsanitizer/tsan/tsan_rtl_amd64.S
+++ b/libsanitizer/tsan/tsan_rtl_amd64.S
@@ -33,7 +33,7 @@ ASM_SYMBOL_INTERCEPTOR(setjmp):
   // obtain SP, store in %rdi, first argument to `void __tsan_setjmp(uptr sp)`
 #if defined(__FreeBSD__) || defined(__NetBSD__)
   lea 8(%rsp), %rdi
-#elif defined(__linux__) || defined(__APPLE__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__onyx__)
   lea 16(%rsp), %rdi
 #else
 # error "Unknown platform"
@@ -75,7 +75,7 @@ ASM_SYMBOL_INTERCEPTOR(_setjmp):
   // obtain SP, store in %rdi, first argument to `void __tsan_setjmp(uptr sp)`
 #if defined(__FreeBSD__) || defined(__NetBSD__)
   lea 8(%rsp), %rdi
-#elif defined(__linux__) || defined(__APPLE__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__onyx__)
   lea 16(%rsp), %rdi
 #else
 # error "Unknown platform"
@@ -124,7 +124,7 @@ ASM_SYMBOL_INTERCEPTOR(sigsetjmp):
   // obtain SP, store in %rdi, first argument to `void __tsan_setjmp(uptr sp)`
 #if defined(__FreeBSD__) || defined(__NetBSD__)
   lea 24(%rsp), %rdi
-#elif defined(__linux__) || defined(__APPLE__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__onyx__)
   lea 32(%rsp), %rdi
 #else
 # error "Unknown platform"
--- a/libsanitizer/ubsan/ubsan_platform.h
+++ b/libsanitizer/ubsan/ubsan_platform.h
@@ -17,7 +17,7 @@
 #if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||        \
     defined(__NetBSD__) || defined(__DragonFly__) ||                           \
     (defined(__sun__) && defined(__svr4__)) || defined(_WIN32) ||              \
-    defined(__Fuchsia__)
+    defined(__Fuchsia__) || defined(__onyx__)
 #define CAN_SANITIZE_UB 1
 #else
 # define CAN_SANITIZE_UB 0
--- a/libsanitizer/sanitizer_common/sanitizer_mallinfo.h
+++ b/libsanitizer/sanitizer_common/sanitizer_mallinfo.h
@@ -25,7 +25,7 @@ struct __sanitizer_struct_mallinfo {
   uptr v[10];
 };
 
-#elif SANITIZER_LINUX || SANITIZER_APPLE || SANITIZER_FUCHSIA
+#elif SANITIZER_LINUX || SANITIZER_APPLE || SANITIZER_FUCHSIA || SANITIZER_ONYX
 
 struct __sanitizer_struct_mallinfo {
   int v[10];
--- a/libsanitizer/configure.tgt
+++ b/libsanitizer/configure.tgt
@@ -24,7 +24,7 @@ SANITIZER_COMMON_TARGET_DEPENDENT_OBJECT
 case "${target}" in
   x86_64-*-freebsd* | i?86-*-freebsd*)
 	;;
-  x86_64-*-linux* | i?86-*-linux*)
+  x86_64-*-linux* | i?86-*-linux* | x86_64-*-onyx*)
 	if test x$ac_cv_sizeof_void_p = x8; then
 		TSAN_SUPPORTED=yes
 		LSAN_SUPPORTED=yes
--- a/libsanitizer/sanitizer_common/sanitizer_procmaps_linux.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_procmaps_linux.cpp
@@ -10,7 +10,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "sanitizer_platform.h"
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 #include "sanitizer_common.h"
 #include "sanitizer_procmaps.h"
 
--- a/libsanitizer/sanitizer_common/sanitizer_posix.h
+++ b/libsanitizer/sanitizer_common/sanitizer_posix.h
@@ -40,7 +40,7 @@ uptr internal_write(fd_t fd, const void
 uptr internal_mmap(void *addr, uptr length, int prot, int flags,
                    int fd, u64 offset);
 uptr internal_munmap(void *addr, uptr length);
-#if SANITIZER_LINUX
+#if SANITIZER_LINUX || SANITIZER_ONYX
 uptr internal_mremap(void *old_address, uptr old_size, uptr new_size, int flags,
                      void *new_address);
 #endif
